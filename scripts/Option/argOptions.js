const _$_270f = ["\x6E\x61\x6D\x65", "\x6C\x65\x6E\x67\x74\x68", "\x63\x6F\x6D\x6D\x61\x6E\x64\x73", "\x6B\x65\x79\x73", "\x64\x61\x74\x61", "\x61\x72\x67\x73", "\xA7\x72\xA7\x65", "\x61\x6C\x69\x61\x73\x65\x73", "\x6F\x70\x74\x69\x6F\x6E\x73", "\x67\x65\x74", "\xA7\x72\xA7\x36", "\xA7\x72\xA7\x37\xA7\x6F", "\x73\x75\x62\x63\x6F\x6D\x6D\x61\x6E\x64", "\x61\x72\x67\x75\x6D\x65\x6E\x74\x73", "\x59\x6F\x75\x20\x6D\x75\x73\x74\x20\x61\x74\x6C\x65\x61\x73\x74\x20\x61\x64\x64\x20\x61\x20\x73\x75\x62\x63\x6F\x6D\x6D\x61\x6E\x64\x20\x4F\x52\x20\x61\x20\x61\x72\x67\x75\x6D\x65\x6E\x74\x20\x69\x6E\x20\x74\x68\x65\x20\x63\x6F\x64\x65", "\x70\x75\x73\x68", "\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6F\x6E", "\x63\x6F\x6E\x63\x61\x74", "\x69\x6E\x63\x6C\x75\x64\x65\x73", "\x6D\x61\x74\x63\x68", "\x69\x73\x49\x6E\x74\x65\x67\x65\x72", "\x69\x6E\x74", "\x73\x74\x72\x69\x6E\x67", "\x6E\x75\x6D\x62\x65\x72", "\x67\x65\x74\x42\x79\x4E\x61\x6D\x65", "\x70\x6C\x61\x79\x65\x72\x73", "\x74\x61\x72\x67\x65\x74", "\x74\x6F\x53\x74\x72\x69\x6E\x67"]; import { client } from '../beapi_modules/BEAPI_CORE_SCRIPT.js'; class CmdArgs { registerArgs(_0xC270) { const _0xBF85 = _0xC270[_$_270f[0]]; const _0xC21D = Object[_$_270f[3]](_0xC270[_$_270f[2]])[_$_270f[1]]; const _0xC02B = _0xC270[_$_270f[2]]; const _0xC07E = _0xC270[_$_270f[4]]; const _0xC1CA = _0xC07E[_$_270f[5]][_$_270f[1]]; const _0xBFD8 = [[], [], []]; const _0xBDE6 = _$_270f[6]; const _0xBCED = client[_$_270f[2]][_$_270f[9]](_0xC270[_$_270f[0]])[_$_270f[8]][_$_270f[7]]; const _0xBE39 = _$_270f[10]; const _0xBF32 = _$_270f[11]; const _0xBEDF = `§r§3Showing §r-${_0xBF85} §3command usage:\n`; let _0xBE8C = `${_0xBEDF}`; for (let _0xC0D1 = 0; _0xC0D1 <= _0xC21D - 1; _0xC0D1++) { if (_0xC02B[_0xC0D1][_$_270f[12]] === undefined && _0xC02B[_0xC0D1][_$_270f[13]] === undefined) { return [false, _$_270f[14]] } if (_0xC02B[_0xC0D1][_$_270f[12]] === undefined) { _0xBFD8[1][_$_270f[15]](_0xC02B[_0xC0D1][_$_270f[13]]); _0xBFD8[0][_$_270f[15]](_0xC0D1); _0xBE8C = _0xBE8C[_$_270f[17]](`  ${_0xBDE6}-${_0xBCED} ${_0xBE39}${_0xC02B[_0xC0D1][_$_270f[13]]} ${_0xBF32}${_0xC02B[_0xC0D1][_$_270f[16]]}\n`) } else { _0xBFD8[1][_$_270f[15]](_0xC02B[_0xC0D1][_$_270f[12]]); if (_0xC02B[_0xC0D1][_$_270f[13]] === undefined) { _0xBE8C = _0xBE8C[_$_270f[17]](`  ${_0xBDE6}-${_0xBCED} ${_0xC02B[_0xC0D1][_$_270f[12]]} ${_0xBF32}${_0xC02B[_0xC0D1][_$_270f[16]]}\n`) } else { _0xBE8C = _0xBE8C[_$_270f[17]](`  ${_0xBDE6}-${_0xBCED} ${_0xC02B[_0xC0D1][_$_270f[12]]} ${_0xBE39}${_0xC02B[_0xC0D1][_$_270f[13]]} ${_0xBF32}${_0xC02B[_0xC0D1][_$_270f[16]]}\n`) } } if (_0xBFD8[0][_$_270f[18]](_0xC0D1)) { continue } _0xBFD8[2][_$_270f[15]](_0xC02B[_0xC0D1][_$_270f[13]]) } const _0xC2C3 = /\bint\b|\bstring\b|\bnumber\b|\btarget\b/g; const _0xC369 = /<\w+:\s\w+>|\[\w+:\s\w+\]/g; const _0xC316 = /\[\w+:\s\w+\]/; for (let _0xBD40 = 0; _0xBD40 <= _0xC1CA - 1; _0xBD40++) { for (let _0xC0D1 = 0; _0xC0D1 <= _0xC21D - 1; _0xC0D1++) { if (_0xC07E[_$_270f[5]][_0xBD40] === _0xBFD8[1][_0xC0D1]) { if (_0xBFD8[2][_0xC0D1] === undefined && _0xC1CA > 1) { return [false, _0xBE8C] } if (_0xBFD8[2][_0xC0D1] === undefined) { return true } let _0xBD93 = _0xBFD8[2][_0xC0D1][_$_270f[19]](_0xC369); _0xBD40++; for (let _0xC124 = 0; _0xC124 <= _0xBD93[_$_270f[1]] - 1; _0xC124++) { if (_0xC1CA > _0xBD93[_$_270f[1]] + 1) { return [false, _0xBE8C] } let _0xC3BC = _0xBD93[_0xC124][_$_270f[19]](_0xC2C3); if (_0xC3BC === null) { return [false, `ERROR: '${_0xBD93[_0xC124]}' this is not a valid variable! please code in a valid variable`] } if (_0xBD93[_0xC124][_$_270f[19]](_0xC316) === null && _0xC07E[_$_270f[5]][_0xBD40] === undefined) { return [false, _0xBE8C] } else { if (_0xC07E[_$_270f[5]][_0xBD40] === undefined) { return true } } switch (_0xC3BC[_$_270f[27]]()) { case _$_270f[21]: { if (isNaN(_0xC07E[_$_270f[5]][_0xBD40]) === true) { return [false, _0xBE8C] } let _0xC177 = parseFloat(_0xC07E[_$_270f[5]][_0xBD40]); if (Number[_$_270f[20]](_0xC177) === false) { return [false, _0xBE8C] } _0xBD40++; break } case _$_270f[22]: { if (isNaN(_0xC07E[_$_270f[5]][_0xBD40]) === false) { return [false, _0xBE8C] } _0xBD40++; break } case _$_270f[23]: { if (isNaN(_0xC07E[_$_270f[5]][_0xBD40]) === true) { return [false, _0xBE8C] } _0xBD40++; break } case _$_270f[26]: { if (client[_$_270f[25]][_$_270f[24]](_0xC07E[_$_270f[5]][_0xBD40]) === undefined) { return [false, `§cPlayer named §r'§7${_0xC07E[_$_270f[5]][_0xBD40]}§r'§c does not exist`] } _0xBD40++; break } } } return true } let _0xBD93 = _0xBFD8[1][_0xC0D1][_$_270f[19]](_0xC369); if (_0xBD93 === null) { continue } for (let _0xC124 = 0; _0xC124 <= _0xBD93[_$_270f[1]] - 1; _0xC124++) { if (_0xC1CA > _0xBD93[_$_270f[1]]) { return [false, _0xBE8C] } let _0xC3BC = _0xBD93[_0xC124][_$_270f[19]](_0xC2C3); if (_0xC3BC === null) { return [false, `ERROR: '${_0xBD93[_0xC124]}' this is not a valid variable! please code in a valid variable`] } if (_0xBD93[_0xC124][_$_270f[19]](_0xC316) === null && _0xC07E[_$_270f[5]][_0xBD40] === undefined) { return [false, _0xBE8C] } else { if (_0xC07E[_$_270f[5]][_0xBD40] === undefined) { return true } } switch (_0xC3BC[_$_270f[27]]()) { case _$_270f[21]: { if (isNaN(_0xC07E[_$_270f[5]][_0xBD40]) === true) { return [false, _0xBE8C] } let _0xC177 = parseFloat(_0xC07E[_$_270f[5]][_0xBD40]); if (Number[_$_270f[20]](_0xC177) === false) { return [false, _0xBE8C] } _0xBD40++; break } case _$_270f[22]: { if (isNaN(_0xC07E[_$_270f[5]][_0xBD40]) === false) { return [false, _0xBE8C] } _0xBD40++; break } case _$_270f[23]: { if (isNaN(_0xC07E[_$_270f[5]][_0xBD40]) === true) { return [false, _0xBE8C] } _0xBD40++; break } case _$_270f[26]: { if (client[_$_270f[25]][_$_270f[24]](_0xC07E[_$_270f[5]][_0xBD40]) === undefined) { return [false, `§cPlayer named §r'§7${_0xC07E[_$_270f[5]][_0xBD40]}§r'§c does not exist`] } _0xBD40++; break } } } return true } } return [false, _0xBE8C] }; }
export var argOptions = new CmdArgs();